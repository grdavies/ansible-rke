kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  annotations:
    storageclass.kubernetes.io/is-default-class: {% if defaultStorageClass == "volumes" %}"true"{% else %}"false"{% endif %}
  name: "{{ volumesClassName }}"
provisioner: csi.nutanix.com
allowVolumeExpansion: true
parameters:
  storageType: NutanixVolumes
  csi.storage.k8s.io/provisioner-secret-name: "ntnx-secret"
  csi.storage.k8s.io/provisioner-secret-namespace: kube-system
  csi.storage.k8s.io/node-publish-secret-name: "ntnx-secret"
  csi.storage.k8s.io/node-publish-secret-namespace: kube-system
  csi.storage.k8s.io/controller-expand-secret-name: "ntnx-secret"
  csi.storage.k8s.io/controller-expand-secret-namespace: kube-system
  csi.storage.k8s.io/fstype: "{{ volumesFsType }}"
  # dataServiceEndPoint: "{{ ntnx_pe_dataservice_ip }}:3260"
  flashMode: "{{ volumesFlashMode }}"
  storageContainer: "{{ volumesStorageContainer }}"
  chapAuth: "{{ volumesChapAuth }}"
  storageType: "NutanixVolumes"
  whitelistIPMode: "{{ volumesWhitelistIPAddr }}"
  whitelistIPAddr: "{{ volumesWhitelistIPMode }}"
{% if volumesLvm %}
  isLVMVolume: {{ volumesLvm }}
  numLVMDisks: {{ volumesLvmNumDisks }}
{% endif %}
reclaimPolicy: "{{ volumesReclaimPolicy }}"
# mountOptions:
#    -option1
#    -option2
---
apiVersion: snapshot.storage.k8s.io/v1beta1
kind: VolumeSnapshotClass
metadata:
  name: nutanix-snapshot-class
driver: csi.nutanix.com
parameters:
  storageType: NutanixVolumes
  csi.storage.k8s.io/snapshotter-secret-name: "ntnx-secret"
  csi.storage.k8s.io/snapshotter-secret-namespace: kube-system
deletionPolicy: Delete
